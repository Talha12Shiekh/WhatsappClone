
  // const [ButtonClicked, setButtonClicked] = useState(false);

  // 

  // const [textAlign, setTextAlign] = useState("center");

  // const [IconAlign, setIconAlign] = useState("align-center");

  // const [openTextEditor,setopenTextEditor] = useState(false);

  // const [textedited,settextedited] = useState(false);

  // const handleAlignment = () => {
  //   if (textAlign == "center") {
  //     setTextAlign("left");
  //     setIconAlign("align-left");
  //   } else if (textAlign == "left") {
  //     setTextAlign("right");
  //     setIconAlign("align-right");
  //   } else if (textAlign == "right") {
  //     setTextAlign("center");
  //     setIconAlign("align-center");
  //   }
  // }

  // const panResponder = useRef(
  //   PanResponder.create({
  //     onMoveShouldSetPanResponder: () => true,
  //     onPanResponderMove: Animated.event([null, { dx: pan.x, dy: pan.y }], {
  //       useNativeDriver: true,
  //     }),
  //     onPanResponderRelease: () => {
  //       pan.extractOffset();
  //     },
  //   })
  // ).current;   
   
      <View
        style={{
          width: 300,
          height: 50,
          position: "absolute",
          zIndex: 9999999999,
          justifyContent: "space-between",
          alignItems: "center",
          flexDirection: "row",
          paddingHorizontal: 10,
          transform:[{scale:!openTextEditor ? 0 :1 }],
          opacity:!textedited ? 0 :1
        }}
      >
        <View>
          <TouchableOpacity onPress={() => settextedited(true)}>
            <View
              style={{
                width: 60,
                height: 30,
                backgroundColor: "transparent",
                borderColor: TITLE_COLOR,
                borderWidth: 1,
                borderRadius: 30,
                justifyContent: "center",
                alignItems: "center",
              }}
            >
              <Text style={{ fontSize: 12, color: TITLE_COLOR }}>Done</Text>
            </View>
          </TouchableOpacity>
        </View>
        <View style={{ flexDirection: "row", gap: 20 }}>
          <TouchableOpacity onPress={handleAlignment}>
            <View>
              <Feather name={IconAlign} size={24} color={TITLE_COLOR} />
            </View>
          </TouchableOpacity>
          <TouchableOpacity
            onPress={() => setButtonClicked((btnClcked) => !btnClcked)}
          >
            <View
              style={{
                backgroundColor: ButtonClicked ? "black" : TITLE_COLOR,
                width: 25,
                aspectRatio: 1,
                justifyContent: "center",
                alignItems: "center",
                borderRadius: 5,
              }}
            >
              <Foundation
                name="text-color"
                size={20}
                color={ButtonClicked ? TITLE_COLOR : "black"}
              />
            </View>
          </TouchableOpacity>
        </View>
      </View>
    {/*  */}
    {/* text handler */}
      <Animated.View
        style={{
          borderRadius: 20,
          backgroundColor: ButtonClicked ? TITLE_COLOR : "transparent",
          transform:[...pan.getTranslateTransform(),{scale:!openTextEditor ? 0 : 1}],
          height: 50,
          paddingHorizontal: 10,
          justifyContent: "center",
          alignItems: "center",
          width: "100%",
          zIndex: 9999999999,
          position: "absolute",
          top: 350,
        }}
        {...panResponder.panHandlers}
      >
        <TextInput
          value={title}
          placeholder={"Add text"}
          textAlign={textAlign}
          placeholderTextColor={TITLE_COLOR}
          onChangeText={(text) => setTitle(text)}
          style={{
            color: !ButtonClicked ? TITLE_COLOR : "black",
            fontWeight: "bold",
            width: "100%",
            fontSize: 20,
            height: 50,
          }}
        ></TextInput>
      </Animated.View>
    {/*  */}
    {/* overlay */}
      <View
        style={{
          backgroundColor: "rgba(0,0,0,.5)",
          position: "absolute",
          zIndex: 1000000,
          transform:[{scale:!openTextEditor ? 0 : 130}],
          justifyContent: "center",
          alignItems: "center",
          width:10,aspectRatio:1,
          opacity:!textedited ? 0 :1
        }}
      ></View>
{/*  */}

const panResponder = useRef(
      PanResponder.create({
        onMoveShouldSetPanResponder: () => true,
        onPanResponderMove: Animated.event([null, { dx: pan.x, dy: pan.y }]),
        onPanResponderRelease: () => {
          pan.extractOffset();
        },
      })
    ).current;

  const pan = useRef(new Animated.ValueXY(0)).current;
